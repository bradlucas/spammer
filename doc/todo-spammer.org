# -*- mode:org; -*-
#+STARTUP: showall
#+STARTUP: hidestars
#+OPTIONS: toc:nil
#+OPTIONS: skip:t
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="./org.css" />
#+OPTIONS: ^:nil

* Things to do or consider
** DONE feature/fix-mean-logic
*** DONE Running mean needs to be pre-processed so the next possible value isn't above the limit
*** DONE Same for the recent mean
*** DONE Refactor process-input to use ok-to-send
*** DONE Verify the running mean and recent mean functions are working properly
** DONE feature/add-tests
*** DONE Add tests for simpler functions
*** DONE Add tests for ok-to-send
** DONE feature/ordered-set
*** Need a better new-mail function
- Need a ordered set
- Try https://github.com/amalloy/ordered

- Refactor sent-emails (add, contains?, new-email?)
- Modify for ordered-set

- check for just email

** DONE feature/performance-means
*** DONE Calculate running mean without scanning the entire set
Since the mean is the total divided by the number keep a running total and number of items
*** DONE Calculate recent mean without taking 100 from the entire set each time
- https://github.com/amalloy/ring-buffer
*** DONE With the ring-buffer and the new running mean technique we no longer need the order-set of email records.
- Simply save the emails to send in a Set
** Next...
*** Command line to accept test file or number of test records to generate
*** Could use environ to pull 'max' values out of the enironment
*** How about sending the email while processing. Add records to a queuue and have another process send them?
*** What about a long running version. Suppose one that doesn't end?
**** Interruptable?
**** Support for interface to values while running


